// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client { //this is the generator that will generate the prisma client
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db { //this is the database connection
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User { //this is the user model
  id    String @id @unique //matches kinde user id
  email String @unique

  File    File[] //each user can have multiple files
  Message Message[] //each user can have multiple messages

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id") //not every user can be a customer
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id") //mapped to the name of...
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus { //all possible states there could be for a file upload (everything that could go right or wrong)
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File { //this is the file model
  id   String @id @default(cuid()) //cuid -> collision resistance unique identifier
  name String //name of the file

  uploadStatus UploadStatus @default(PENDING) // an enum where default value is pending until the file is uploaded and processed

  url      String //url to the file in the cloud
  key      String //key to the file in the cloud
  messages Message[] //each file can have multiple messages

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Message { 
  id   String @id @default(cuid()) //cuid -> collision resistance unique identifier
  text String @db.Text() //text is a type that can store a lot of text

  isUserMessage Boolean //if the message is from the user or the bot

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
}